# -*- coding: utf-8 -*-
"""Analisi della sparsità del dataset MovieLens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgOvTMnIShZ9AsMWg6jnbxEocve8IrDC

# **Analisi della sparsità del dataset MovieLens**

## Dataset

Il dataset utilizzato in questo notebook è reperibile al seguente link: [http://files.grouplens.org/datasets/movielens/ml-latest.zip](http://files.grouplens.org/datasets/movielens/ml-latest.zip).

## Caricamento del dataset e delle librerie necessarie
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

!wget http://files.grouplens.org/datasets/movielens/ml-latest.zip
!unzip ml-latest.zip

df_ratings = pd.read_csv("ml-latest/ratings.csv")
df_movies = pd.read_csv("ml-latest/movies.csv")

"""## Esplorazione del dataset

Si ottengano delle informazioni riguardo i due dataset appena caricati.
"""

df_ratings.info()

df_ratings.describe()

df_ratings.shape

df_movies.info()

df_movies.describe()

df_movies.shape

df_movies.head(10)

users = pd.DataFrame(df_ratings['userId'])
users.shape

users = pd.DataFrame(np.unique(users))
users.shape

movies = pd.DataFrame(df_ratings['movieId'])
movies.shape

movies = pd.DataFrame(np.unique(movies))
movies.shape

"""## Analisi della sparsità

Si calcoli la sparsità del dataset.
"""

sparsity = 1 - (df_ratings.shape[0] / (users.shape[0] * movies.shape[0]))
sparsity

"""Dal calcolo appena effettuato si può evincere che la *matrice dei rating* è quasi completamente sparsa (si ha una densità soltanto del 0.2% circa)."""

distribution = df_ratings[['userId', 'movieId']].groupby(['userId']).count()

"""Si illustri graficamente la sparsità del dataset. Ci si aspetta che pochi utenti abbiano effetuato molte valutazioni e che molti utenti abbiano effettuato poche valutazioni."""

plt.figure(figsize=(15, 10))
plt.hist(distribution['movieId'], bins=range(20, 1500, 10))
plt.gca().set_xlabel("Number of users")
plt.gca().set_ylabel("Number of ratings")
plt.show()

"""Dal grafico è possible vedere la distribuzione *long tail*.

## Altre analisi

Si osservi la media dei rating per ogni film.
"""

rating_mean = df_ratings[['movieId', 'rating']].groupby(['movieId']).mean().reset_index()
rating_mean

"""Si illustri graficamente la media dei rating per ogni film."""

plt.figure(figsize=(15, 10))
sns.distplot(rating_mean['rating'])
plt.show()

"""Si illustrino i film che hanno un rating medio superiore a 4."""

rating_mean[rating_mean['rating'] > 4].head()

"""Si contino i film che hanno un rating medio superiore a 4."""

rating_mean[rating_mean['rating'] > 4].count()

"""Si scelgano i film che hanno un rating medio superiore a 5."""

rating_mean[rating_mean['rating'] >= 5].head()

"""Si contino i film che hanno un rating medio superiore a 5."""

rating_mean[rating_mean['rating'] >= 5].count()

"""Dopo queste analisi sembra che molto film abbiano un rating medio di 5. Tuttavia, ipotizzo che i film *popolari*, ovvero quei film con un rating maggiore di 4, siano in numero molto inferiore rispetto al numero di film con un rating medio pari a 5.

Conto per ogni film il numero di rating effettuati.
"""

movies_high_no_of_reviews = df_ratings[['movieId', 'rating']].groupby(['movieId']).count().reset_index()
movies_high_no_of_reviews.columns = ['movieId', 'no_reviews']
movies_high_no_of_reviews.head()

"""Prepraro il dataframe con i rating medi e il numero di rating effettuati per ogni film."""

df_movies_ratings = pd.DataFrame()
df_movies_ratings['movieId'] = rating_mean['movieId']
df_movies_ratings['rating_mean'] = rating_mean['rating']
df_movies_ratings['no_reviews'] = movies_high_no_of_reviews['no_reviews']
df_movies_ratings

"""Calcolo il rapporto tra il numero di rating effettuati e il rating medio:
\begin{equation}
ratio = \frac{number \text{ } of \text{ } reviews}{rating \text{ } medio}
\end{equation}

Quindi, i film che hanno un $ratio$ alto significa che hanno un rating medio alto e un numero di rating alto; i film che hanno un $ratio$ basso siginifica che hanno un rating medio alto e un numero di rating basso, pertanto non sono dei film popolari.
"""

ratio = []
for i in range(0, len(df_movies_ratings)):
  ratio.append(df_movies_ratings.iloc[i]['no_reviews'] / df_movies_ratings.iloc[i]['rating_mean'])

df_movies_ratings['ratio'] = ratio

"""Si aggiunga al dataframe i *ratio* appena calcolati."""

df_movies_ratings.head()

"""Si selezionino soltanto i film che hanno un rating medio superiore a 4"""

df_movies_ratings[df_movies_ratings['rating_mean'] > 4]

df_high_ratings = df_movies_ratings[df_movies_ratings['rating_mean'] > 4]

"""Si visualizzi graficamente i vari $ratio$ per ogni film."""

plt.figure(figsize=(15, 10))
plt.scatter(x=[i for i in range(0, len(df_high_ratings))], y=df_high_ratings['ratio'])
plt.show()

"""Si selezioni un $ratio > 6000$."""

df_high_ratings[df_high_ratings['ratio'] > 6000].head()

"""È possibile notare che il numero di film popolari è strettamnte minore rispetto al numero di film con un rating medio pari a 5."""

df_high_ratings[df_high_ratings['ratio'] > 6000].count()